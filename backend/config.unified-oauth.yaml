# 统一OAuth提供商配置示例
# 支持通用OAuth和Gitee OAuth，配置结构完全一致

# 服务器配置
server:
  host: "0.0.0.0"
  port: 8080
  debug: false
  reload: false
  workers: 1

# 数据库配置
database: ./data/app.db

# AI模型配置（保持现有结构）
ai_models:
  default_index: 0
  models:
    - label: "GPT-4o Mini (快速)"
      provider: "openai"
      config:
        api_key: "${OPENAI_API_KEY}"
        base_url: "https://api.openai.com/v1"
        model: "gpt-4o-mini"
        temperature: 0.3
        max_tokens: 8000
        context_window: 128000
        reserved_tokens: 2000
        timeout: 12000
        max_retries: 3
      description: "适合快速处理，成本较低"

# 文件设置（保持现有结构）
file_settings:
  max_file_size: 10485760
  chunk_size: 8000
  allowed_extensions:
    - pdf
    - docx
    - md
    - txt

# 目录配置（保持现有结构）
directories:
  upload_dir: ./data/uploads
  report_dir: ./data/reports
  log_dir: ./data/logs
  temp_dir: ./data/temp

# 日志配置（保持现有结构）
logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: "./data/logs/app.log"
  max_size: 10485760
  backup_count: 5

# 任务处理配置（保持现有结构）
task_processing:
  max_concurrent_tasks: 3
  task_timeout: 12000
  retry_failed_tasks: true

# CORS配置（保持现有结构）
cors:
  enabled: true
  origins:
    - "http://localhost:3000"
    - "http://localhost:3001"
    - "http://localhost:3002"
    - "http://localhost:3003"
    - "http://localhost:5173"
    - "http://127.0.0.1:3000"
    - "http://127.0.0.1:5173"
    - "${FRONTEND_URL}"
  allow_credentials: true
  allow_methods: ["*"]
  allow_headers: ["*"]
  development_mode: "${CORS_DEVELOPMENT_MODE:false}"

# 测试模式配置（保持现有结构）
test_mode: false

# 外部API Mock配置（保持现有结构）
external_api_mock:
  third_party_auth:
    enabled: true
    mock_delay: 0.1
  ai_models:
    enabled: true
    mock_delay: 0.5
  external_services:
    enabled: true
    mock_delay: 0.2

# 【新】统一OAuth配置 - 支持多种提供商的统一配置结构
third_party_auth:
  # OAuth提供商类型选择 - 核心配置项
  # 可选值: "generic" (通用OAuth) | "gitee" (Gitee OAuth)
  provider_type: "${OAUTH_PROVIDER_TYPE:generic}"
  
  # ===== 通用配置项 (所有提供商都需要) =====
  client_id: "${OAUTH_CLIENT_ID}"
  client_secret: "${OAUTH_CLIENT_SECRET}"
  
  # 重定向URL配置 - 所有提供商使用相同结构
  frontend_domain: "${FRONTEND_DOMAIN:http://localhost:5173}"
  redirect_path: "/callback"
  
  # ===== 提供商特定配置 =====
  # 权限范围配置 - 根据provider_type自动适配
  # generic: "base.profile"
  # gitee: "user_info" 
  scope: "${OAUTH_SCOPE:base.profile}"
  
  # ===== API端点配置 =====
  # 注意：Gitee提供商会自动使用标准端点，无需配置
  api_endpoints:
    # 通用OAuth端点 (仅当provider_type=generic时使用)
    authorization_url: "${OAUTH_AUTH_URL:}"
    token_url: "${OAUTH_TOKEN_URL:}"
    userinfo_url: "${OAUTH_USERINFO_URL:}"
    
    # Gitee OAuth端点 (当provider_type=gitee时自动设置，无需配置)
    # authorization_url: "https://gitee.com/oauth/authorize"
    # token_url: "https://gitee.com/oauth/token" 
    # userinfo_url: "https://gitee.com/api/v5/user"
  
  # ===== 请求配置 =====
  request_timeout: 30
  max_retries: 3

# JWT配置（保持现有结构）
jwt:
  secret_key: "${JWT_SECRET_KEY:ai_doc_test_secret_key}"
  algorithm: "HS256"
  access_token_expire_minutes: 30

# 环境变量映射
env_mapping:
  # 现有映射保持不变
  OPENAI_API_KEY: "OPENAI_API_KEY"
  JWT_SECRET_KEY: "JWT_SECRET_KEY"
  
  # 统一OAuth环境变量映射
  OAUTH_PROVIDER_TYPE: "OAUTH_PROVIDER_TYPE"
  OAUTH_CLIENT_ID: "OAUTH_CLIENT_ID"
  OAUTH_CLIENT_SECRET: "OAUTH_CLIENT_SECRET"
  FRONTEND_DOMAIN: "FRONTEND_DOMAIN"
  OAUTH_SCOPE: "OAUTH_SCOPE"
  
  # 通用OAuth端点映射
  OAUTH_AUTH_URL: "OAUTH_AUTH_URL"
  OAUTH_TOKEN_URL: "OAUTH_TOKEN_URL"
  OAUTH_USERINFO_URL: "OAUTH_USERINFO_URL"
  
  # 向后兼容的映射（保持现有变量名可用）
  THIRD_PARTY_CLIENT_ID: "OAUTH_CLIENT_ID"
  THIRD_PARTY_CLIENT_SECRET: "OAUTH_CLIENT_SECRET"
  THIRD_PARTY_AUTH_URL: "OAUTH_AUTH_URL"
  THIRD_PARTY_TOKEN_URL: "OAUTH_TOKEN_URL"
  THIRD_PARTY_USERINFO_URL: "OAUTH_USERINFO_URL"
  GITEE_CLIENT_ID: "OAUTH_CLIENT_ID"
  GITEE_CLIENT_SECRET: "OAUTH_CLIENT_SECRET"